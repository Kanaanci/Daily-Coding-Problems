package dailyCodingProblems;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Random;
import java.util.Vector;
import java.lang.Math;

/**
*Given a list of numbers and a number k, return whether any two numbers from the list add up to k.
*
*For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.
*
*Bonus: Can you do this in one pass?
*
*
*Doing this with Linked List, Array List, and Vector
*/

public class CodingProblem1 {
	//setting variable, random object, and lists
	private static int k = 5;
	
	private static Random rand = new Random();
	private static LinkedList<Integer> numLinkedList = new LinkedList<Integer>();
	private static ArrayList<Integer> numArrayList = new ArrayList<Integer>();
	private static Vector<Integer> numVector = new Vector<Integer>();
	
	public static boolean inList() {
		for(Integer num : numLinkedList) { //iterate through the list, setting num to the current integer
			if(numLinkedList.contains(k - num)) { //if the list contains the value of k - num, that means two numbers add up to k
				return true;
			}
		}
		
		return false;
	}
	
	public static void main(String[] args) {
		//loop to add random 10 random numbers to each list between 0 and 30
		for(int i = 0; i < 10; i++) {
			int numToAdd = rand.nextInt(30) + 1; //add 1 to prevent "Bound must be positive exception" nextInt() uses bound - 1 which results in occasional 0 - 1 instaces and produces error.
			
			numLinkedList.add(rand.nextInt(numToAdd));
			numArrayList.add(rand.nextInt(numToAdd));
			numVector.add(rand.nextInt(numToAdd));
		}
		
		System.out.println("Values in lists:" + numLinkedList); //print the numbers that are in the lists (all lists are the same only need to print one)
		
		if(inList()) {
			System.out.println("Two numbers add up to" + k);
		}
	}
}
